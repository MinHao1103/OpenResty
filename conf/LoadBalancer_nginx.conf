worker_processes  1;

error_log logs/error.log debug;
#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include            mime.types;
    default_type       application/octet-stream;
    sendfile           on; # 提高靜態文件傳輸效率
    keepalive_timeout  65; # 連接的空閒超時時間
    lua_shared_dict route 10m; # 建立一個 route 記憶體空間 (10MB)

    # tcp_nopush       on; # 可優化大文件傳輸
    # gzip             on; # 壓縮，提高傳輸效率

    # log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                   '$status $body_bytes_sent "$http_referer" '
    #                   '"$http_user_agent" "$http_x_forwarded_for"';
    # access_log  logs/access.log  main;

    # HTTPS server
    server {
        listen       8088; # 監聽端口
        server_name  localhost; # 域名

        # charset koi8-r; # 了字符集編碼
        # access_log  logs/host.access.log  main; # 日誌的位置和使用的日誌格式

        location / {

            client_max_body_size 0; # 不限制請求大小
	   		proxy_max_temp_file_size 0; # Nginx 代理請求不會把回應寫入臨時文件
            default_type text/html;

            set $server '';
            set $path '';
            set $reqUri '';

            access_by_lua '
                ngx.var.reqUri = ngx.var.uri;
				ngx.log(ngx.INFO, "[URI] ", ngx.var.uri)

				-- 定義正則表達式，用於匹配 URI 中服務名稱，例如：/TestService/123，會提取出 /TestService/
				local keys, err = ngx.re.match(ngx.var.uri, [[\/[\w\d\ \-\+\%]*\/]], "jo")

				-- 如果匹配不到，則印出 Log 訊息
				if not keys then
			    	ngx.log(ngx.ERR, "[Failed to extract service name from URI] ", ngx.var.uri)
			    	ngx.say("Failed to get route: ", err)
					return
				end
	            local key = keys[0]
				ngx.log(ngx.INFO, "[KEY] ", key)

                -- 取得服務的所有註冊資訊
                local route = ngx.shared.route
                local serverList, flags = route:get(key)
                local servers = {}
                for match in serverList:gmatch("[^,]+") do
                    table.insert(servers, match)
                end
                ngx.log(ngx.INFO, "[All Servers] ", table.concat(servers, ", "))

                -- 檢查是否有註冊的服務，如果沒有則返回 404 錯誤
                if #servers == 0 then
                    ngx.log(ngx.ERR, "[No registered servers found for route] Key: ", key)
                    ngx.say("No registered servers found for route, Key: ", key)
                    ngx.exit(404)
                    return
                end

	            -- 實現負載平衡
                local path = servers[1]
                local serverlen = table.getn(servers)
				if serverlen > 1 then
					local randomNum = math.random(serverlen)
					path = servers[randomNum]
		            ngx.log(ngx.INFO, "[servers(", randomNum ,")]: ", path)
				end

				ngx.var.server = key
                ngx.var.path = path
                ngx.log(ngx.INFO, "[Key]: ", key, " [Path]: ", path)
            ';

            proxy_pass http://$path;
			proxy_set_header X-Real-IP $remote_addr;

            # 取得 response body
            body_filter_by_lua_block {
                local chunk = ngx.arg[1]
                local eof = ngx.arg[2]
                if ngx.ctx.response_body == nil then
                    ngx.ctx.response_body = chunk
                else
                    ngx.ctx.response_body = ngx.ctx.response_body .. chunk
                end
                if eof then
                    ngx.ctx.response_body = ngx.ctx.response_body or ""
                end
            }

            log_by_lua_block {
				ngx.log(ngx.INFO, "[log_by_lua_block status] ", ngx.status)
				local http_info = {
                    request_uri = ngx.var.request_uri,
                    request_method = ngx.req.get_method(),
                    request_headers = ngx.req.get_headers(),
                    response_status = ngx.status,
                    response_headers = ngx.resp.get_headers(),
                    response_body = ngx.ctx.response_body
                }
                local cjson = require("cjson.safe")
                ngx.log(ngx.DEBUG, "[Http Info] ", cjson.encode(http_info))

			}
        }

        # redirect server error pages to the static page /50x.html
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # redirect server error pages to the static page /404.html
        error_page   404  /404.html;
        location = /404.html {
            root   html;
        }

    }

    # HTTPS server：配置服務的主機位置
    server {
        listen       8089;
        server_name  localhost;

        # ssl_certificate      cert.pem; # SSL 憑證的位置
        # ssl_certificate_key  cert.key; # SSL 私鑰的位置
        # ssl_session_cache    shared:SSL:1m; # SSL 會話緩存
        # ssl_session_timeout  5m; # SSL 會話的超時時間為 5 分鐘
        # ssl_ciphers  HIGH:!aNULL:!MD5; # SSL 連接的加密算法
        # ssl_prefer_server_ciphers  on; # Nginx 將優先使用服務器端指定的加密算法

        location /addRoute {
            content_by_lua_block {
                -- 獲取請求參數
                local args = ngx.req.get_uri_args()
                local server = args.server
                local path = args.path

                -- 檢查參數是否為空
                if not server or not path or not path then
                    ngx.status = ngx.HTTP_BAD_REQUEST
                    ngx.say("Error: 'server', 'path' parameters are required")
                    return ngx.exit(ngx.HTTP_BAD_REQUEST)
                end

                -- 將路徑和目標添加到路由表中
                local route = ngx.shared.route
                local success, err, forcible

                local serverList, flags = route:get(server)
                ngx.log(ngx.INFO, "[serverList] ", serverList)

				if serverList == nil or serverList == "" then
				   success, err, forcible = route:set(server, path, 0) -- exptime 設為 0，表示不會過期
				else
				   success, err, forcible = route:set(server, serverList .. "," .. path, 0) -- exptime 設為 0，表示不會過期
				end

                -- 檢查是否成功添加路徑
                if not success then
                    ngx.status = ngx.HTTP_INTERNAL_SERVER_ERROR
                    ngx.say("Failed to add route: ", err)
                    return ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
                end

                ngx.say("OK")
            }
        }

        location /listRoute {
            content_by_lua_block {
                local route = ngx.shared.route
                local keys = route:get_keys()

                -- 如果 route 為空直接回傳
                if not keys then
                    ngx.say("No routes found")
                    return
                end

                -- 遍歷所有鍵值對後輸出
                for _, key in ipairs(keys) do
                    local value = route:get(key)
                    ngx.say("Route: ", key, " -> ", value)
                end
            }
        }

        location /delRoute {
            content_by_lua_block {
                -- 获取请求参数
                local args = ngx.req.get_uri_args()
                local server = args.server
                local path = args.path

                -- 检查参数是否为空
                if not server or not path then
                    ngx.status = ngx.HTTP_BAD_REQUEST
                    ngx.say("Error: 'server' and 'path' parameters are required")
                    return ngx.exit(ngx.HTTP_BAD_REQUEST)
                end

                -- 取得路由表中的值
                local route = ngx.shared.route
                local serverList, flags = route:get(server)

                -- 如果 serverList 有值，則進行刪除
                if serverList then
                    -- 使用 gsub 函数替换
                    local newServerList = serverList:gsub(path .. ",?", "") -- 删除路徑及前面的逗號
                    newServerList = newServerList:gsub(",$", "") -- 如果末尾是逗號也要刪除，$ 表示字串的尾端
                    local success, err, forcible = route:set(server, newServerList)
                    if not success then
                        ngx.status = ngx.HTTP_INTERNAL_SERVER_ERROR
                        ngx.say("Failed to update route: ", err)
                        return ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
                    end
                end
                ngx.say("OK")
            }
        }

        #error_page  404              /404.html;
        # redirect server error pages to the static page /50x.html
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }
}
